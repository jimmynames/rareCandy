"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withLayout = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* globals ReactClass */


var defaultDebug = {
  enabled: false
};

var defaultGutter = "20px";

var breakpointsShape = _react.PropTypes.shape({
  sm: _react.PropTypes.number,
  md: _react.PropTypes.number,
  lg: _react.PropTypes.number
});

var debugShape = _react.PropTypes.shape({
  enabled: _react.PropTypes.bool,
  color: _react.PropTypes.string,
  border: _react.PropTypes.string
});

var LayoutProvider = function (_Component) {
  _inherits(LayoutProvider, _Component);

  function LayoutProvider() {
    _classCallCheck(this, LayoutProvider);

    return _possibleConstructorReturn(this, (LayoutProvider.__proto__ || Object.getPrototypeOf(LayoutProvider)).apply(this, arguments));
  }

  _createClass(LayoutProvider, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _props = this.props,
          _props$breakpoints = _props.breakpoints,
          propsBreakpoints = _props$breakpoints === undefined ? {} : _props$breakpoints,
          _props$debug = _props.debug,
          propsDebug = _props$debug === undefined ? {} : _props$debug,
          _props$gutter = _props.gutter,
          propsGutter = _props$gutter === undefined ? "20px" : _props$gutter;
      var _context = this.context,
          _context$breakpoints = _context.breakpoints,
          contextBreakpoints = _context$breakpoints === undefined ? {} : _context$breakpoints,
          _context$debug = _context.debug,
          contextDebug = _context$debug === undefined ? {} : _context$debug,
          _context$gutter = _context.gutter,
          contextGutter = _context$gutter === undefined ? "20px" : _context$gutter;


      return {
        breakpoints: _extends({}, _utils.defaultBreakpoints, contextBreakpoints, propsBreakpoints),
        debug: _extends({}, defaultDebug, contextDebug, propsDebug),
        gutter: propsGutter || contextGutter || defaultGutter
      };
    }
  }, {
    key: "render",
    value: function render() {
      return _react.Children.only(this.props.children);
    }
  }]);

  return LayoutProvider;
}(_react.Component);

LayoutProvider.propTypes = {
  children: _react.PropTypes.node,
  breakpoints: breakpointsShape,
  gutter: _react.PropTypes.string,
  debug: debugShape
};
LayoutProvider.contextTypes = {
  breakpoints: breakpointsShape,
  gutter: _react.PropTypes.string,
  debug: debugShape
};
LayoutProvider.childContextTypes = {
  breakpoints: breakpointsShape,
  gutter: _react.PropTypes.string,
  debug: debugShape
};
exports.default = LayoutProvider;
var withLayout = exports.withLayout = function withLayout(WrappedComponent
// eslint-disable-next-line react/no-multi-comp
) {
  var _class, _temp;

  return _temp = _class = function (_Component2) {
    _inherits(Breakpoints, _Component2);

    function Breakpoints() {
      _classCallCheck(this, Breakpoints);

      return _possibleConstructorReturn(this, (Breakpoints.__proto__ || Object.getPrototypeOf(Breakpoints)).apply(this, arguments));
    }

    _createClass(Breakpoints, [{
      key: "render",
      value: function render() {
        var _context2 = this.context,
            breakpoints = _context2.breakpoints,
            debug = _context2.debug,
            gutter = _context2.gutter;


        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
          breakpoints: breakpoints,
          debug: debug,
          gutter: gutter
        }));
      }
      // eslint-disable-line  react/prefer-stateless-function

    }]);

    return Breakpoints;
  }(_react.Component), _class.contextTypes = {
    breakpoints: breakpointsShape,
    debug: debugShape,
    gutter: _react.PropTypes.string
  }, _temp;
};