{"version":3,"sources":["../../src/utils/develop.js"],"names":["program","directory","directoryPath","withBasePath","createIndexHtml","developHtml","catch","console","error","err","process","exit","bootstrap","webpackConfig","port","compilerConfig","devConfig","resolve","compiler","webpack","app","express","use","require","log","path","heartbeat","graphqlHTTP","schema","store","getState","graphiql","static","__dirname","noInfo","quiet","publicPath","output","proxy","config","prefix","url","req","res","proxiedUrl","originalUrl","pipe","request","next","parsedPath","parsePath","extname","sendFile","status","end","get","server","Server","io","on","socket","join","listener","listen","host","e","code","open","address","opn","watchGlobs","map","chokidar","watch","to","emit","startServer","rl","copyStaticDirectory","setTimeout","rlInterface","createInterface","input","stdin","stdout","module","exports","detect","parseInt","_port","question","answer","length","match"],"mappings":"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","file":"develop.js","sourcesContent":["/* @flow */\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst request = require(`request`)\nconst bootstrap = require(`../bootstrap`)\nconst chokidar = require(`chokidar`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`./webpack.config`)\nconst rl = require(`readline`)\nconst parsePath = require(`parse-filepath`)\nconst { store } = require(`../redux`)\nconst copyStaticDirectory = require(`./copy-static-directory`)\nconst developHtml = require(`./develop-html`)\nconst { withBasePath } = require(`./path`)\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfer with the regular\n// bootstrap.\nsetTimeout(() => {\n  copyStaticDirectory()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n  const directoryPath = withBasePath(directory)\n  const createIndexHtml = () =>\n    developHtml(program).catch(err => {\n      console.error(err)\n      process.exit(1)\n    })\n\n  // Start bootstrap process.\n  await bootstrap(program)\n\n  await createIndexHtml()\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const devConfig = compilerConfig.resolve()\n  const compiler = webpack(devConfig)\n\n  /**\n   * Set up the express app.\n   **/\n  const app = express()\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: () => {},\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n  app.use(\n    `/___graphql`,\n    graphqlHTTP({\n      schema: store.getState().schema,\n      graphiql: true,\n    })\n  )\n\n  app.use(express.static(__dirname + `/public`))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      noInfo: true,\n      quiet: true,\n      publicPath: devConfig.output.publicPath,\n    })\n  )\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      req.pipe(request(proxiedUrl)).pipe(res)\n    })\n  }\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    const parsedPath = parsePath(req.originalUrl)\n    if (parsedPath.extname === `` || parsedPath.extname === `.html`) {\n      res.sendFile(directoryPath(`public/index.html`), err => {\n        if (err) {\n          res.status(500).end()\n        }\n      })\n    } else {\n      next()\n    }\n  })\n\n  // As last step, check if the file exists in the public folder.\n  app.get(`*`, (req, res) => {\n    // Load file but ignore errors.\n    res.sendFile(directoryPath(`/public/${req.url}`), err => {\n      if (err) {\n        res.status(404).end()\n      }\n    })\n  })\n\n  /**\n   * Set up the HTTP server and socket.io.\n   **/\n\n  const server = require(`http`).Server(app)\n  const io = require(`socket.io`)(server)\n\n  io.on(`connection`, socket => {\n    socket.join(`clients`)\n  })\n\n  const listener = server.listen(program.port, program.host, e => {\n    if (e) {\n      if (e.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        console.log(\n          `Unable to start Gatsby on port ${program.port} as there's already a process listing on that port.`\n        )\n      } else {\n        console.log(e)\n      }\n\n      process.exit()\n    } else {\n      if (program.open) {\n        const host =\n          listener.address().address === `127.0.0.1`\n            ? `localhost`\n            : listener.address().address\n        const opn = require(`opn`)\n        opn(`http://${host}:${listener.address().port}`)\n      }\n    }\n  })\n\n  // Register watcher that rebuilds index.html every time html.js changes.\n  const watchGlobs = [`src/html.js`, `**/gatsby-ssr.js`].map(directoryPath)\n  chokidar.watch(watchGlobs).on(`change`, async () => {\n    await createIndexHtml()\n    io.to(`clients`).emit(`reload`)\n  })\n}\n\nmodule.exports = (program: any) => {\n  const detect = require(`detect-port`)\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  detect(port, (err, _port) => {\n    if (err) {\n      console.error(err)\n      process.exit()\n    }\n\n    if (port !== _port) {\n      // eslint-disable-next-line max-len\n      const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n      return rlInterface.question(question, answer => {\n        if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n          program.port = _port // eslint-disable-line no-param-reassign\n        }\n\n        return startServer(program)\n      })\n    }\n\n    return startServer(program)\n  })\n}\n"]}